/*
面向对象
1. 面向对象的基本特征：封装、继承、多态
2. 相关关键字和API
3. 面向对象的编程原则和设计模式
 */

/*
类的5大成员
1. 属性
    属性有默认值，原则和数组的元素默认值一样，即基本数据类型为0，引用数据类型为null
2. 方法
    2.1. 形参的加载
        2.1.1. 形参是基本数据类型：实参赋值给形参的是数据值（复制数据值）
        2.1.2. 形参是引用数据类型：实参复制给形参的是地址
    2.2. 方法的重载（overloading）
        在同一个类中，出现了两个或者多个方法名称相同，形参列表不同。返回值和访问修饰符可以不同
        形参列表不同 -> 形参个数、类型或者顺序不同
    2.3. 可变参数
        public double getArea(double... nums) {
            return 0.0;
        }
        可变参数的方法的调用原则：
        2.3.1. 可变参数的形参部分，可以传入数个对应类型的实参，也可以传入对应类型的数组对象
        2.3.2. 可变参数只能有一个，且只能放在最后一个
3. 构造器
    this()表示调用本类的无参构造，构造器声明必须为第一行
4. 代码块
    4.1. 非静态代码块
        4.1.1. 非静态代码块中的代码什么时候执行？
                在每次创建对象的时候执行，且比构造器早
        4.1.2. 实例初始化过程 <init>()
                1) 为成员变量显式赋值
                2) 非静态代码块的代码
                3) 执行构造器
                其中1)和2)按照代码顺序执行，而3（构造器）一定是当中最后执行
    4.2. 静态代码块
        4.2.1. 特点
                1）每一个类的静态代码块只会执行一次
                2）静态代码块在第一次使用这个类的时候执行，即在类的初始化时执行。
5. 内部类：一般只为外部类服务
 */


/*
类初始化，即执行类初始化方法 <clinit>()
    1. 一个类有可能有好几个实例初始化方法，但是只有一个类初始化方法。由2部分代码组成：
        1）静态变量的显示赋值
        2）静态代码块的代码
        其中1）和2）按照顺序执行
    2. 一个类初始化的时候首先会检查父类是否初始化。如果没有初始化会先初始化父类。
 */


public class ClassAndObject {
}